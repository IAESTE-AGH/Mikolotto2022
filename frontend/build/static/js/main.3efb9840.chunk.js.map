{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","email","wish","handleChange","bind","handleSubmit","handleValidation","event","value","target","name","this","setState","errors","alert","errorMessage","search","substring","length","className","onSubmit","action","method","htmlFor","type","placeholder","required","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAmGeA,G,MAhGN,kDAEP,WAAYC,GAAO,IAAD,EASyC,OATzC,qBAChB,cAAMA,IACDC,MAAQ,CACXC,MAAQ,GACRC,KAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAK,gBAC3C,EAAKC,aAAe,EAAKA,aAAaD,KAAK,gBAC3C,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAK,gBAAM,EAkF1D,OAjFA,yCAED,SAAaG,GACX,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KAE1BC,KAAKC,SAAS,eACXF,EAAQF,MAEZ,0BAED,WAEE,IAAIK,EAASF,KAAKL,mBAEJ,oDAAXO,EACDC,MAAM,0CAGNA,MAAMD,KAET,8BAED,WACE,IAAIE,EAAe,kDAWnB,MATwB,KAArBJ,KAAKX,MAAMC,OAAoC,KAApBU,KAAKX,MAAME,OACvCa,GAAgB,8BAG4B,IAA3CJ,KAAKX,MAAMC,MAAMe,OAAO,gBACzBD,GAAgB,+BAGlBA,EAAeA,EAAaE,UAAU,EAAEF,EAAaG,OAAO,IACtC,MACvB,oBAED,WACE,OACE,yBAAKC,UAAU,OACb,4BAAI,uCAAmB,cAAW,wCAClC,0BACEC,SAAUT,KAAKN,aACfgB,OAAO,8BACPC,OAAO,QAEP,2BAAOC,QAAQ,SAAO,iBACN,6BACd,2BACEb,KAAK,QACLc,KAAK,QACLC,YAAY,gBACZC,UAAQ,EACRlB,MAAOG,KAAKX,MAAMC,MAClB0B,SAAUhB,KAAKR,gBAGnB,2BAAOoB,QAAQ,QAAM,iBACR,6BACX,8BACEb,KAAK,OACLe,YAAY,kBACZC,UAAQ,EACRlB,MAAOG,KAAKX,MAAME,KAClByB,SAAUhB,KAAKR,gBAGnB,2BACEgB,UAAU,aACVK,KAAK,SACLhB,MAAM,kBAGV,sCACE,kHACA,gHACA,gEACA,6EAGP,EA7FM,CAASoB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3efb9840.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      email : '',\n      wish : ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  handleChange(event){\n    const value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({\n      [name] : value\n    });\n  }\n\n  handleSubmit(){\n\n    let errors = this.handleValidation();\n\n    if(errors === \"Nie można wysłać listu z powodu.\"){\n      alert(\"Twój list został wysłany!\");\n    }\n    else{\n      alert(errors);\n    }\n  }\n\n  handleValidation(){\n    let errorMessage = \"Nie można wysłać listu z powodu:\";\n\n    if(this.state.email === \"\" || this.state.wish === \"\"){\n      errorMessage += \" niewypełnione pola,\"\n    }\n\n    if(this.state.email.search(\"@iaeste.pl\") === -1){\n      errorMessage += \" nieprawidłowy email,\"\n    }\n\n    errorMessage = errorMessage.substring(0,errorMessage.length-1);\n    return errorMessage + \".\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1><div>&#10052;</div> Mikolotto <div>&#10052;</div></h1>\n        <form\n          onSubmit={this.handleSubmit}\n          action=\"http://chmielecki.pro:4430/\"\n          method=\"POST\"\n        >\n          <label htmlFor=\"email\">\n            Adres e-mail: <br/>\n            <input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"E-mail IAESTE\"\n              required\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"wish\">\n            Twój list: <br/>\n            <textarea\n              name=\"wish\"\n              placeholder=\"Drogi Mikolaju,\"\n              required\n              value={this.state.wish}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input\n            className=\"submit-btn\"\n            type=\"submit\"\n            value=\"Wyślij!\"\n          />\n        </form>\n        <h3>Zasady</h3>\n          <p>1. Należy się zarejestrować za pomocą adresu e-mail z outlooka.</p>\n          <p>2. Ponowne wysłanie listu spowoduje zastąpienie nim poprzedniego listu.</p>\n          <p>3. Rejestracja trwa do 8 grudnia.</p>\n          <p>4. Prezenty przynosimy na wigilijkę.</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}